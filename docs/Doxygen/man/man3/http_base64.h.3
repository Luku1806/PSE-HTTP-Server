.TH "include/http_base64.h" 3 "Mon Jun 10 2019" "Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/http_base64.h \- This file provides functions to encode and decode c-strings/char pointers from and to base64 encoded text\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include 'http_string\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBbuild_decoding_table\fP ()"
.br
.RI "Builds up the internal decoding table\&. Is called by base64_decode\&. Anywhere in the program base64_cleanup has to be called to free the memory allocated for the table\&. "
.ti -1c
.RI "void \fBbase64_cleanup\fP ()"
.br
.RI "Frees the memory allocated for the decoding table\&. Has to be called anywhere after base64_decode to prevent memory leaks\&. "
.ti -1c
.RI "char * \fBbase64_encode\fP (const unsigned char *data, size_t input_length, size_t *output_length)"
.br
.RI "Encodes a normal c-string into base64 encoded text\&. "
.ti -1c
.RI "unsigned char * \fBbase64_decode\fP (const char *data, size_t input_length, size_t *output_length)"
.br
.RI "Decodes a base64 encoded c-string into normal decoded text\&. "
.ti -1c
.RI "\fBstring\fP * \fBbase64_encode_string\fP (\fBstring\fP *toEncode)"
.br
.RI "Encodes a normal string into base64 encoded text\&. "
.ti -1c
.RI "\fBstring\fP * \fBbase64_decode_string\fP (\fBstring\fP *toDecode)"
.br
.RI "Decodes a base64 encoded c-string into normal decoded text\&. Returns NULL if string toDecode is not base64\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file provides functions to encode and decode c-strings/char pointers from and to base64 encoded text\&. 


.SH "Function Documentation"
.PP 
.SS "unsigned char* base64_decode (const char * data, size_t input_length, size_t * output_length)"

.PP
Decodes a base64 encoded c-string into normal decoded text\&. Allocates memory for the return value\&. This has to be freed!
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The c-string to decode from base64\&. 
.br
\fIinput_length\fP The length if the c-string to decode\&. 
.br
\fIoutput_length\fP The lenght of the returned decoded char* (c-string)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The char* (c-string) containing the decoded text\&. It has the length *output_length\&. 
.RE
.PP

.SS "\fBstring\fP* base64_decode_string (\fBstring\fP * toDecode)"

.PP
Decodes a base64 encoded c-string into normal decoded text\&. Returns NULL if string toDecode is not base64\&. Allocates memory for the returned string\&. This has to freed be by calling free_str!
.PP
\fBParameters:\fP
.RS 4
\fItoDecode\fP The string to decode from base64\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The string containing the decoded text\&. NULL if toDecode is not base64\&. 
.RE
.PP

.SS "char* base64_encode (const unsigned char * data, size_t input_length, size_t * output_length)"

.PP
Encodes a normal c-string into base64 encoded text\&. Allocates memory for the return value\&. This has to be freed!
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The c-string to encode to base64\&. 
.br
\fIinput_length\fP The length if the c-string to encode\&. 
.br
\fIoutput_length\fP The lenght of the returned encoded char* (c-string)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The char* (c-string) containing the encoded text\&. It has the length *output_length\&. 
.RE
.PP

.SS "\fBstring\fP* base64_encode_string (\fBstring\fP * toEncode)"

.PP
Encodes a normal string into base64 encoded text\&. Allocates memory for the returned string\&. This has to be freed by calling free_str!
.PP
\fBParameters:\fP
.RS 4
\fItoEncode\fP The string to encode to base64\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The string containing the encoded text\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Documentation from the source code\&.
